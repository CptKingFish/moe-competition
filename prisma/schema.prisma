// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider     = "prisma-kysely"
    output       = "../src/db"
    fileName     = "types.ts"
    enumFileName = "enums.ts"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id                String         @id @default(cuid())
    googleId          String?        @unique
    name              String?
    email             String         @unique
    picture           String?
    sessions          Session[]
    role              Role
    competitions      Competition[]
    submittedProjects Project[]      @relation("SubmittedProjects")
    votes             Vote[]
    school            School?        @relation(fields: [schoolId], references: [id])
    schoolId          String?
    approverProjects  Project[]      @relation("ApproverProjects")
    projectDrafts     ProjectDraft[] @relation("DraftedProjects")
}

model Session {
    id        String   @id
    userId    String
    expiresAt DateTime @default(now()) @db.Timestamptz

    user User @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model School {
    id           String         @id
    name         String         @unique
    shortname    String         @unique
    users        User[]
    projects     Project[]
    ProjectDraft ProjectDraft[]
}

model Competition {
    id           String         @id
    name         String         @unique
    description  String
    startDate    DateTime       @default(now()) @db.Timestamptz
    endDate      DateTime       @default(now()) @db.Timestamptz
    createdBy    User           @relation(fields: [createdById], references: [id])
    createdById  String
    projects     Project[]
    ProjectDraft ProjectDraft[]
    votes        Vote[]

    CompetitionCategory CompetitionCategory[]
}

model CompetitionCategory {
    id            String          @id
    competition   Competition     @relation(fields: [competitionId], references: [id])
    competitionId String
    category      ProjectCategory @relation(fields: [categoryId], references: [id])
    categoryId    String
}

model Project {
    id                String          @id
    name              String
    description       String?
    submittedAt       DateTime        @default(now()) @db.Timestamptz
    submittedBy       User            @relation("SubmittedProjects", fields: [submittedById], references: [id])
    submittedById     String
    linkedSchool      School          @relation(fields: [linkedSchoolId], references: [id])
    linkedSchoolId    String
    author            String
    authorEmail       String
    competition       Competition     @relation(fields: [competitionId], references: [id])
    competitionId     String
    projectUrl        String
    votes             Vote[]
    subjectLevel      SubjectLevel
    projectType       ProjectType
    projectCategory   ProjectCategory @relation(fields: [projectCategoryId], references: [id])
    projectCategoryId String
    youtubeUrl        String?
    bannerImg         Bytes?
    approver          User?           @relation("ApproverProjects", fields: [approverId], references: [id])
    approverId        String?
    approvalStatus    ApprovalStatus  @default(PENDING)
}

model ProjectDraft {
    id                String           @id
    name              String?
    description       String?
    draftedAt         DateTime         @default(now()) @db.Timestamptz
    draftedBy         User             @relation("DraftedProjects", fields: [draftedById], references: [id])
    draftedById       String
    linkedSchool      School           @relation(fields: [linkedSchoolId], references: [id])
    linkedSchoolId    String
    author            String?
    authorEmail       String?
    competition       Competition?     @relation(fields: [competitionId], references: [id])
    competitionId     String?
    projectUrl        String?
    subjectLevel      SubjectLevel?
    projectType       ProjectType?
    projectCategory   ProjectCategory? @relation(fields: [projectCategoryId], references: [id])
    projectCategoryId String?
    youtubeUrl        String?
    bannerImg         Bytes?
}

model Vote {
    id            String      @id
    user          User        @relation(fields: [userId], references: [id])
    project       Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
    competition   Competition @relation(fields: [competitionId], references: [id])
    userId        String
    projectId     String
    competitionId String
}

model ProjectCategory {
    id                  String                @id
    name                String                @unique
    Project             Project[]
    ProjectDraft        ProjectDraft[]
    CompetitionCategory CompetitionCategory[]
}

enum Role {
    STUDENT
    TEACHER
    ADMIN
}

enum SubjectLevel {
    G1
    G2
    G3
    Open
}

enum ProjectType {
    SCRATCH
    MICROBIT
    OTHERS
}

enum ApprovalStatus {
    PENDING
    APPROVED
    REJECTED
}
